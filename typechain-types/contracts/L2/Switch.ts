/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SwitchInterface extends utils.Interface {
  functions: {
    "lightBulb()": FunctionFragment;
    "turnOnLightBulb()": FunctionFragment;
    "veaInbox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "lightBulb" | "turnOnLightBulb" | "veaInbox"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "lightBulb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "turnOnLightBulb",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "veaInbox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "lightBulb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "turnOnLightBulb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veaInbox", data: BytesLike): Result;

  events: {
    "lightBulbToggled(uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "lightBulbToggled"): EventFragment;
}

export interface lightBulbToggledEventObject {
  messageId: BigNumber;
  lightBulbOwner: string;
}
export type lightBulbToggledEvent = TypedEvent<
  [BigNumber, string],
  lightBulbToggledEventObject
>;

export type lightBulbToggledEventFilter =
  TypedEventFilter<lightBulbToggledEvent>;

export interface Switch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwitchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lightBulb(overrides?: CallOverrides): Promise<[string]>;

    turnOnLightBulb(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    veaInbox(overrides?: CallOverrides): Promise<[string]>;
  };

  lightBulb(overrides?: CallOverrides): Promise<string>;

  turnOnLightBulb(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  veaInbox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    lightBulb(overrides?: CallOverrides): Promise<string>;

    turnOnLightBulb(overrides?: CallOverrides): Promise<void>;

    veaInbox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "lightBulbToggled(uint64,address)"(
      messageId?: null,
      lightBulbOwner?: null
    ): lightBulbToggledEventFilter;
    lightBulbToggled(
      messageId?: null,
      lightBulbOwner?: null
    ): lightBulbToggledEventFilter;
  };

  estimateGas: {
    lightBulb(overrides?: CallOverrides): Promise<BigNumber>;

    turnOnLightBulb(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    veaInbox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lightBulb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    turnOnLightBulb(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    veaInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
